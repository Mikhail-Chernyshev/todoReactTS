{"ast":null,"code":"var _jsxFileName = \"/Users/Mihail/Desktop/dev/todoReactTS/src/components/TodoList.tsx\";\nimport React from 'react';\nimport TodoItem from './TodoItem';\nimport TodoPanel from './TodoPanel';\n// import Button from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = _ref => {\n  let {\n    todos,\n    checkTodo,\n    deleteTodo,\n    selectTodoForEdit,\n    todoIdEdit,\n    changeTodo\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: todos.map(todo => {\n      if (todo.id === todoIdEdit) return /*#__PURE__*/_jsxDEV(TodoPanel, {\n        mode: \"edit\",\n        changeTodo: changeTodo,\n        editTodo: {\n          name: todo.name,\n          description: todo.description\n        }\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this);\n      return /*#__PURE__*/_jsxDEV(TodoItem, {\n        todo: todo,\n        checkTodo: checkTodo,\n        deleteTodo: deleteTodo,\n        selectTodoForEdit: selectTodoForEdit\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","TodoItem","TodoPanel","TodoList","todos","checkTodo","deleteTodo","selectTodoForEdit","todoIdEdit","changeTodo","map","todo","id","name","description"],"sources":["/Users/Mihail/Desktop/dev/todoReactTS/src/components/TodoList.tsx"],"sourcesContent":["import React from 'react';\nimport TodoItem from './TodoItem';\nimport TodoPanel from './TodoPanel';\n// import Button from './Button';\nexport type Todo = {\n  id: number;\n  name: string;\n  description: string;\n  checked: boolean;\n};\ninterface TodoListProps {\n  todos: Todo[];\n  checkTodo: (id: Todo['id']) => void;\n  deleteTodo: (id: Todo['id']) => void;\n  selectTodoForEdit: (id: Todo['id']) => void;\n  todoIdEdit: Todo['id'] | null;\n  changeTodo: ({ name, description }: Omit<Todo, 'checked' | 'id'>) => void;\n}\n\nconst TodoList: React.FC<TodoListProps> = ({\n  todos,\n  checkTodo,\n  deleteTodo,\n  selectTodoForEdit,\n  todoIdEdit,\n  changeTodo\n}) => {\n  return (\n    <div>\n      {todos.map((todo) => {\n        if (todo.id === todoIdEdit)\n          return (\n            <TodoPanel\n              key={todo.id}\n              mode='edit'\n              changeTodo={changeTodo}\n              editTodo={{ name: todo.name, description: todo.description }}\n            />\n          );\n        return (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            checkTodo={checkTodo}\n            deleteTodo={deleteTodo}\n            selectTodoForEdit={selectTodoForEdit}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default TodoList;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,SAAS,MAAM,aAAa;AACnC;AAAA;AAgBA,MAAMC,QAAiC,GAAG,QAOpC;EAAA,IAPqC;IACzCC,KAAK;IACLC,SAAS;IACTC,UAAU;IACVC,iBAAiB;IACjBC,UAAU;IACVC;EACF,CAAC;EACC,oBACE;IAAA,UACGL,KAAK,CAACM,GAAG,CAAEC,IAAI,IAAK;MACnB,IAAIA,IAAI,CAACC,EAAE,KAAKJ,UAAU,EACxB,oBACE,QAAC,SAAS;QAER,IAAI,EAAC,MAAM;QACX,UAAU,EAAEC,UAAW;QACvB,QAAQ,EAAE;UAAEI,IAAI,EAAEF,IAAI,CAACE,IAAI;UAAEC,WAAW,EAAEH,IAAI,CAACG;QAAY;MAAE,GAHxDH,IAAI,CAACC,EAAE;QAAA;QAAA;QAAA;MAAA,QAIZ;MAEN,oBACE,QAAC,QAAQ;QAEP,IAAI,EAAED,IAAK;QACX,SAAS,EAAEN,SAAU;QACrB,UAAU,EAAEC,UAAW;QACvB,iBAAiB,EAAEC;MAAkB,GAJhCI,IAAI,CAACC,EAAE;QAAA;QAAA;QAAA;MAAA,QAKZ;IAEN,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,KAhCIT,QAAiC;AAkCvC,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}