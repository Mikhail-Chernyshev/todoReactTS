{"ast":null,"code":"var _jsxFileName = \"/Users/Mihail/Desktop/dev/todoReactTS/src/components/TodoList.tsx\";\nimport React from 'react';\nimport TodoItem from './TodoItem';\nimport TodoPanel from './TodoPanel';\n// import Button from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = _ref => {\n  let {\n    todos,\n    checkTodo,\n    deleteTodo,\n    selectTodoForEdit,\n    todoIdEdit\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: todos.map(todo => {\n      //@ts-ignore\n      if (todo.id === todoIdEdit) return /*#__PURE__*/_jsxDEV(TodoPanel, {\n        mode: \"edit\"\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 44\n      }, this);\n      return /*#__PURE__*/_jsxDEV(TodoItem, {\n        todo: todo,\n        checkTodo: checkTodo,\n        deleteTodo: deleteTodo,\n        selectTodoForEdit: selectTodoForEdit\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","TodoItem","TodoPanel","TodoList","todos","checkTodo","deleteTodo","selectTodoForEdit","todoIdEdit","map","todo","id"],"sources":["/Users/Mihail/Desktop/dev/todoReactTS/src/components/TodoList.tsx"],"sourcesContent":["import React from 'react';\nimport TodoItem from './TodoItem';\nimport TodoPanel from './TodoPanel';\n// import Button from './Button';\nexport type Todo = {\n  id: number;\n  name: string;\n  description: string;\n  checked: boolean;\n};\ninterface TodoListProps {\n  todos: Todo[];\n  checkTodo: (id: Todo['id']) => void;\n  deleteTodo: (id: Todo['id']) => void;\n  selectTodoForEdit: (id: Todo['id']) => void;\n  todoIdEdit: Todo['id'] | null;\n}\n\nconst TodoList: React.FC<TodoListProps> = ({\n  todos,\n  checkTodo,\n  deleteTodo,\n  selectTodoForEdit,\n  todoIdEdit,\n}) => {\n  return (\n    <div>\n      {todos.map((todo) => {\n        //@ts-ignore\n        if (todo.id === todoIdEdit) return <TodoPanel mode='edit' key={todo.id} />;\n        return (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            checkTodo={checkTodo}\n            deleteTodo={deleteTodo}\n            selectTodoForEdit={selectTodoForEdit}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default TodoList;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,SAAS,MAAM,aAAa;AACnC;AAAA;AAeA,MAAMC,QAAiC,GAAG,QAMpC;EAAA,IANqC;IACzCC,KAAK;IACLC,SAAS;IACTC,UAAU;IACVC,iBAAiB;IACjBC;EACF,CAAC;EACC,oBACE;IAAA,UACGJ,KAAK,CAACK,GAAG,CAAEC,IAAI,IAAK;MACnB;MACA,IAAIA,IAAI,CAACC,EAAE,KAAKH,UAAU,EAAE,oBAAO,QAAC,SAAS;QAAC,IAAI,EAAC;MAAM,GAAME,IAAI,CAACC,EAAE;QAAA;QAAA;QAAA;MAAA,QAAI;MAC1E,oBACE,QAAC,QAAQ;QAEP,IAAI,EAAED,IAAK;QACX,SAAS,EAAEL,SAAU;QACrB,UAAU,EAAEC,UAAW;QACvB,iBAAiB,EAAEC;MAAkB,GAJhCG,IAAI,CAACC,EAAE;QAAA;QAAA;QAAA;MAAA,QAKZ;IAEN,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,KAxBIR,QAAiC;AA0BvC,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}